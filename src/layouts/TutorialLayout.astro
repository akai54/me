---
import type { MarkdownInstance, MarkdownLayoutProps } from "astro";
import Steps from "../components/Steps.astro";
import path from "node:path";
import type { Frontmatter, FrontmatterTutorial } from "../frontmatter";
import BlogLayout from "./BlogLayout.astro";

type Props = MarkdownLayoutProps<Frontmatter>;

const { frontmatter } = Astro.props;

const tutorialPages = await Astro.glob<Frontmatter>(
  "../pages/tutorials/**/*.md"
);

function getSteps(
  tutorialPages: MarkdownInstance<Frontmatter>[],
  currentTutorialSlug?: string
) {
  const steps = tutorialPages
    .filter((page) => page.frontmatter.tutorial?.slug === currentTutorialSlug)
    .sort((a, b) => {
      const aPath = path.parse(a.file);
      const bPath = path.parse(b.file);
      // Directories are numbered so pages in different directories can be sorted easily.
      if (aPath.dir < bPath.dir) return -1;
      if (aPath.dir > bPath.dir) return 1;
      // Index files should come first within a directory.
      if (aPath.name === "index") return -1;
      if (bPath.name === "index") return 1;
      // Other files within a directory are numbered and sorted ascending.
      return aPath.name < bPath.name ? -1 : aPath.name > bPath.name ? 1 : 0;
    })
    .map((page) => ({
      href: page.url ?? "",
      title: page.frontmatter.tutorial?.title ?? "",
    }));

  return steps;
}

const steps = getSteps(tutorialPages, frontmatter.tutorial?.slug);
---

<BlogLayout {...Astro.props}>
  <Steps slot="tutorial-steps" steps={steps} />
  <slot />
</BlogLayout>
